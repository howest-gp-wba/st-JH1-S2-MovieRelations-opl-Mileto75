// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wba.Oefening.RateAMovie.Web.Data;

#nullable disable

namespace Wba.Oefening.RateAMovie.Web.Migrations
{
    [DbContext(typeof(MovieContext))]
    partial class MovieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<long>("CastId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieAppearancesId")
                        .HasColumnType("bigint");

                    b.HasKey("CastId", "MovieAppearancesId");

                    b.HasIndex("MovieAppearancesId");

                    b.ToTable("ActorMovie");

                    b.HasData(
                        new
                        {
                            CastId = 1L,
                            MovieAppearancesId = 1L
                        },
                        new
                        {
                            CastId = 2L,
                            MovieAppearancesId = 1L
                        },
                        new
                        {
                            CastId = 3L,
                            MovieAppearancesId = 1L
                        },
                        new
                        {
                            CastId = 4L,
                            MovieAppearancesId = 2L
                        });
                });

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.Property<long>("DirectedMoviesId")
                        .HasColumnType("bigint");

                    b.Property<long>("DirectorsId")
                        .HasColumnType("bigint");

                    b.HasKey("DirectedMoviesId", "DirectorsId");

                    b.HasIndex("DirectorsId");

                    b.ToTable("DirectorMovie");

                    b.HasData(
                        new
                        {
                            DirectedMoviesId = 1L,
                            DirectorsId = 1L
                        },
                        new
                        {
                            DirectedMoviesId = 1L,
                            DirectorsId = 2L
                        },
                        new
                        {
                            DirectedMoviesId = 2L,
                            DirectorsId = 3L
                        });
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Actor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FirstName = "Keanu",
                            LastName = "Reeves"
                        },
                        new
                        {
                            Id = 2L,
                            FirstName = "Laurence",
                            LastName = "Fishburne"
                        },
                        new
                        {
                            Id = 3L,
                            FirstName = "Carrie-Anne",
                            LastName = "Moss"
                        },
                        new
                        {
                            Id = 4L,
                            FirstName = "Sean",
                            LastName = "Bean"
                        });
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "The Wachowski Brothers"
                        },
                        new
                        {
                            Id = 20L,
                            Name = "Newline Cinema"
                        });
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Director", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FirstName = "Lana",
                            LastName = "Wachowski"
                        },
                        new
                        {
                            Id = 2L,
                            FirstName = "Lilly",
                            LastName = "Wachowski"
                        },
                        new
                        {
                            Id = 3L,
                            FirstName = "Peter",
                            LastName = "Jackson"
                        });
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyId = 1L,
                            ReleaseDate = new DateTime(1999, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix"
                        },
                        new
                        {
                            Id = 2L,
                            CompanyId = 20L,
                            ReleaseDate = new DateTime(2001, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Fellowship of the Ring"
                        });
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("RatedMovieId")
                        .HasColumnType("bigint");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ReviewerId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RatedMovieId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            RatedMovieId = 1L,
                            Review = "I think this movie is ok!",
                            ReviewerId = 1L,
                            Score = (byte)3
                        },
                        new
                        {
                            Id = 101L,
                            RatedMovieId = 2L,
                            Review = "I think this movie is really nice!",
                            ReviewerId = 1L,
                            Score = (byte)4
                        },
                        new
                        {
                            Id = 102L,
                            RatedMovieId = 1L,
                            ReviewerId = 2L,
                            Score = (byte)4
                        });
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FirstName = "Siegfried",
                            LastName = "Derdeyn",
                            Username = "siegfried.derdeyn"
                        },
                        new
                        {
                            Id = 2L,
                            FirstName = "Joachim",
                            LastName = "François",
                            Username = "joachim.francois"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("Wba.Oefening.RateAMovie.Core.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wba.Oefening.RateAMovie.Core.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieAppearancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.HasOne("Wba.Oefening.RateAMovie.Core.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("DirectedMoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wba.Oefening.RateAMovie.Core.Entities.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Movie", b =>
                {
                    b.HasOne("Wba.Oefening.RateAMovie.Core.Entities.Company", "Company")
                        .WithMany("Movies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Rating", b =>
                {
                    b.HasOne("Wba.Oefening.RateAMovie.Core.Entities.Movie", "RatedMovie")
                        .WithMany("Ratings")
                        .HasForeignKey("RatedMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wba.Oefening.RateAMovie.Core.Entities.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatedMovie");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Company", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.Movie", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Core.Entities.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
